// generated/ThueLexer.cpp generated by reflex 3.2.11 from /home/master/projects/thue/src/generated/thue.l

#define REFLEX_VERSION "3.2.11"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_YYLTYPE
#undef REFLEX_OPTION_YYSTYPE
#undef REFLEX_OPTION_bison_cc
#undef REFLEX_OPTION_bison_cc_namespace
#undef REFLEX_OPTION_bison_cc_parser
#undef REFLEX_OPTION_bison_complete
#undef REFLEX_OPTION_bison_locations
#undef REFLEX_OPTION_ctorarg
#undef REFLEX_OPTION_ctorinit
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_nodefault
#undef REFLEX_OPTION_noyywrap
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_token_eof
#undef REFLEX_OPTION_token_type

#define REFLEX_OPTION_YYLTYPE             neothue::location
#define REFLEX_OPTION_YYSTYPE             neothue::ThueParserImplementation::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  neothue
#define REFLEX_OPTION_bison_cc_parser     ThueParserImplementation
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_ctorarg             const std::string_view neothue_source_filename, const std::string& neothue_source_code
#define REFLEX_OPTION_ctorinit            neothue_source_filename(neothue_source_filename), neothue_source_code(neothue_source_code)
#define REFLEX_OPTION_header_file         "generated/ThueLexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               ThueLexer
#define REFLEX_OPTION_namespace           neothue
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "generated/ThueLexer.cpp"
#define REFLEX_OPTION_token_eof           neothue::ThueParserImplementation::symbol_type(0, location())
#define REFLEX_OPTION_token_type          neothue::ThueParserImplementation::symbol_type

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 19 "/home/master/projects/thue/src/generated/thue.l"

    #include "Token.h"
    #include "ThueParserImplementation.h"


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace neothue {

class ThueLexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 36 "/home/master/projects/thue/src/generated/thue.l"

    [[maybe_unused]] const std::string_view neothue_source_filename;
    [[maybe_unused]] const std::string& neothue_source_code;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  ThueLexer(
      const std::string_view neothue_source_filename, const std::string& neothue_source_code,
      // a persistent source of input, empty by default
      const reflex::Input& input = reflex::Input(),
      // optional output stream, std::cout by default
      std::ostream& os = std::cout)
    :
      AbstractBaseLexer(input, os),
      neothue_source_filename(neothue_source_filename), neothue_source_code(neothue_source_code)
  {
  }
  static const int INITIAL = 0;
  static const int LHS = 1;
  static const int SEP = 2;
  static const int RHS = 3;
  static const int STATE = 4;
  std::string filename;
  // bison-complete bison-locations: location() returns lexeme location
  virtual neothue::location location(void)
  {
    neothue::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno()+1);
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end()+2);
    return yylloc;
  }
  // the bison-complete lexer function defined by SECTION 2
  virtual neothue::ThueParserImplementation::symbol_type lex(void);
};

} // namespace neothue

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "/home/master/projects/thue/src/generated/thue.l"
/*
    nthue, an interpreter for Neothue, a dialect of the Thue metalanguage
    Copyright (C) 2022  masterbuilder

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#line 46 "/home/master/projects/thue/src/generated/thue.l"

    #include "../Lexer.h"

    using neothue::position;

    static position marker;


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

neothue::ThueParserImplementation::symbol_type neothue::ThueLexer::lex(void)
{
  static const char *REGEX_INITIAL = "(?m)(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  static const char *REGEX_LHS = "(?m)([\\x0a])|((?:(?:[\\x09-\\x0d\\x20])*(?:[:][:][=])(?:[\\x09-\\x0d\\x20])*))|((?:[^\\x0a:]*)(?=(?:[:][:][=])))";
  static const reflex::Pattern PATTERN_LHS(REGEX_LHS);
  static const char *REGEX_SEP = "(?m)((?:[:][:][=]))";
  static const reflex::Pattern PATTERN_SEP(REGEX_SEP);
  static const char *REGEX_RHS = "(?m)((?:[^\\x0a]*))|([\\x0a])";
  static const reflex::Pattern PATTERN_RHS(REGEX_RHS);
  static const char *REGEX_STATE = "(?m)([^\\x0a](?:.|\\n)*(?=[\\x0a]?))";
  static const reflex::Pattern PATTERN_STATE(REGEX_STATE);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
    switch (start())
    {
      case INITIAL:
        matcher().pattern(PATTERN_INITIAL);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return neothue::ThueParserImplementation::symbol_type(0, location());
            }
            else
            {
              lexer_error("scanner jammed");
              return neothue::ThueParserImplementation::symbol_type();
            }
            break;
          case 1: // rule /home/master/projects/thue/src/generated/thue.l:64: . :
#line 64 "/home/master/projects/thue/src/generated/thue.l"
start(LHS); matcher().unput(chr());
            break;
        }
        break;
      case LHS:
        matcher().pattern(PATTERN_LHS);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return neothue::ThueParserImplementation::symbol_type(0, location());
            }
            else
            {
              lexer_error("scanner jammed");
              return neothue::ThueParserImplementation::symbol_type();
            }
            break;
          case 1: // rule /home/master/projects/thue/src/generated/thue.l:65: [\n] :
#line 65 "/home/master/projects/thue/src/generated/thue.l"
            break;
          case 2: // rule /home/master/projects/thue/src/generated/thue.l:66: {empty_production} :
#line 66 "/home/master/projects/thue/src/generated/thue.l"
start(STATE);
            break;
          case 3: // rule /home/master/projects/thue/src/generated/thue.l:67: {lhs}/{sep} :
#line 67 "/home/master/projects/thue/src/generated/thue.l"
start(SEP); return ThueParserImplementation::make_STRING(str(), location());
            break;
        }
        break;
      case SEP:
        matcher().pattern(PATTERN_SEP);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return neothue::ThueParserImplementation::symbol_type(0, location());
            }
            else
            {
              lexer_error("scanner jammed");
              return neothue::ThueParserImplementation::symbol_type();
            }
            break;
          case 1: // rule /home/master/projects/thue/src/generated/thue.l:68: {sep} :
#line 68 "/home/master/projects/thue/src/generated/thue.l"
start(RHS); return ThueParserImplementation::make_SEPARATOR(location());
            break;
        }
        break;
      case RHS:
        matcher().pattern(PATTERN_RHS);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return neothue::ThueParserImplementation::symbol_type(0, location());
            }
            else
            {
              lexer_error("scanner jammed");
              return neothue::ThueParserImplementation::symbol_type();
            }
            break;
          case 1: // rule /home/master/projects/thue/src/generated/thue.l:69: {rhs} :
#line 69 "/home/master/projects/thue/src/generated/thue.l"
start(LHS); return ThueParserImplementation::make_STRING(str(), location());
            break;
          case 2: // rule /home/master/projects/thue/src/generated/thue.l:70: [\n] :
#line 70 "/home/master/projects/thue/src/generated/thue.l"
start(LHS); return ThueParserImplementation::make_STRING("", location());
            break;
        }
        break;
      case STATE:
        matcher().pattern(PATTERN_STATE);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return neothue::ThueParserImplementation::symbol_type(0, location());
            }
            else
            {
              lexer_error("scanner jammed");
              return neothue::ThueParserImplementation::symbol_type();
            }
            break;
          case 1: // rule /home/master/projects/thue/src/generated/thue.l:71: [^\n](.|\n)*/[\n]? :
#line 71 "/home/master/projects/thue/src/generated/thue.l"
start(LHS); return ThueParserImplementation::make_STRING(str(), location());
            break;
        }
        break;
      default:
        start(0);
    }
  }
}
