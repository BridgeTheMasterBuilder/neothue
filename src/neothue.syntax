%{
    #include <algorithm>
    #include "../Lexer.h"

    using neothue::position;

    static position marker;
    static std::string string_buffer;
    static bool in_string = false;
%}

ws [ \t\n\r\f\v]
unquoted_str [^=; \t\n\r\f\v]+
sq_str [^\\']*
dq_str [^\\"]*
comment [;][^\n]*

%x UNQSTR SQSTR DQSTR

%%

<INITIAL>['] {
    in_string = true;
    marker = location().begin;
    string_buffer.clear();
    start(SQSTR);
}
<SQSTR>{sq_str} string_buffer += str();
<SQSTR>[\\]['] string_buffer += '\'';
<SQSTR>[\\]. string_buffer += text();
<SQSTR>[']  {
    in_string = false;
    start(INITIAL);

    neothue::location pos = location();
    pos.begin = marker;

    return NeothueParserImplementation::make_STRING(string_buffer, pos);
}

<INITIAL>["] {
    in_string = true;
    marker = location().begin;
    string_buffer.clear();
    start(DQSTR);
}
<DQSTR>{dq_str} string_buffer += str();
<DQSTR>[\\]["] string_buffer += '"';
<DQSTR>[\\]. string_buffer += text();
<DQSTR>["]  {
    in_string = false;
    start(INITIAL);

    neothue::location pos = location();
    pos.begin = marker;

    return NeothueParserImplementation::make_STRING(string_buffer, pos);
}

<UNQSTR>{unquoted_str}  {
    start(INITIAL);

    return NeothueParserImplementation::make_STRING(str(), location());
}

<INITIAL>{comment}
<INITIAL>{ws}+
<INITIAL>[=] return NeothueParserImplementation::make_SEPARATOR(location());
<INITIAL>. start(UNQSTR); matcher().unput(chr());
<<EOF>> {
    if(in_string) {
        neothue::location loc = location();

        const std::size_t size = neothue_source_code.size()-1;

        if(neothue_source_code[size] == '\n') {
            std::size_t start_of_line = neothue_source_code.rfind('\n', size-1);

            const std::size_t length = size - (start_of_line == std::string::npos ? 1 : start_of_line);

            loc.begin.line -= 1;
            loc.begin.column += length;
            loc.end.line -= 1;
            loc.end.column += length;
        }

        report_syntax_error(neothue_source_filename, neothue_source_code, loc);
        throw Unterminated_string();
    }
    else {
        return NeothueParserImplementation::make_YYEOF(location());
    }
}
